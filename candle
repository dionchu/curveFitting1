library(quantmod)
getSymbols("^DJI")
chartSeries(DJI)

sd = rollingSD(DJI[,4]-DJI[,1],60)
DJI = na.omit(merge(DJI,sd))

supplementRawData <- function(xts){
macd = MACD(xts[,4],8,16,9)
macd$diff = macd[,1]-macd[,2]
sd = rollingSD(xts[,4]-xts[,1],60)
range = rollingRangeLoc(xts,25)
yrange = rollingRangeLoc(xts,252)
xts = na.omit(merge(xts,sd))
xts = na.omit(merge(xts,range))
xts = merge(xts,yrange,macd)
return(xts)
}

model<-function(xts){
xts = supplementRawData(xts)
xts = na.omit(xts)
loc = darkCloudCover(xts)
pnl = dSD.sls(xts,loc,1,1.5)
stats = merge(candleSize(xts,loc),xts[loc,c("sd","range","yrange","macd","signal","diff")],pnl)
stats$sizeL1 = as.numeric(candleSize(xts,loc-1))
stats.f = stats[stats$sizeL1 <7 & stats$macd < 0.32,]
IC(stats.f$sdpnl)
return(stats)
}
################################################################################

markCandles<-function(x,loc,str,pos=c("h","l")){
pos = match.arg(pos)
if(pos == "h"){pos = 2} else {pos = 3}
n=length(loc)
  for(i in 1:n){
    text(loc[i], x[loc[i],pos], str, adj=0)
  }
}

candleSize<-function(x,loc){

return(abs(x[loc,4]-x[loc,1])/x$sd[loc])

}

findPeaks <- function(x,m=5){
# x = OHLCV data
n = dim(x)[1]
loc <-mat.or.vec(0,1)
for(i in (1+m):(n-m)){
  sub<-x[(i-m):(i+m)]
  if(x[i,2]==max(sub[,2])) {loc <- c(loc,i)}
}
return(loc)
}

findValleys <- function(x,m=5){
# x = OHLCV data
n = dim(x)[1]
loc <-mat.or.vec(0,1)
for(i in (1+m):(n-m)){
  sub<-x[(i-m):(i+m)]
  if(x[i,3]==min(sub[,3])) {loc <- c(loc,i)}
}
return(loc)
}

### find prior trend
pTrend<-function(x,loc,type=c("valley","peaks")){
require(dplyr)
type = match.arg(type)
tStart <- mat.or.vec(0,1)
tLength <- mat.or.vec(0,1)
tMove <- mat.or.vec(0,1)
if(type == "peaks"){
allP <- findPeaks(x,m=4)
  for(i in 1:length(loc)){
    p.loc <- allP[allP<loc[i]-3]
    p.px <- x[p.loc,2]
    tStart <- c(tStart,tryCatch(p.loc[max(which(p.px>lag(p.px)))], warning = function(w) {NA}))
    tLength <- c(tLength,tryCatch(loc[i]-tStart[i], warning = function(w) {NA}))
    tMove <- c(tMove,tryCatch(as.numeric(x[loc[i],4])-as.numeric(x[tStart[i],2]), warning = function(w) {NA}, error = function(e) {NA}))
  }
} else {
allV <- findValleys(x,m=4)
  for(i in 1:length(loc)){
    v.loc <- allV[allV<loc[i]-3]
    v.px <- x[v.loc,3]
    tStart <- c(tStart,tryCatch(v.loc[max(which(v.px<lag(v.px)))], warning = function(w) {NA}))
    tLength <- c(tLength,tryCatch(loc[i]-tStart[i], warning = function(w) {NA}))
    tMove <- c(tMove,tryCatch(as.numeric(x[loc[i],4])-as.numeric(x[tStart[i],3]), warning = function(w) {NA}, error = function(e) {NA}))
  }
}
return(cbind(tStart,tLength,tMove))
}

### find PNL
calcPNL <- function(x,loc,n){
tryCatch(DJI[loc+n,4] %>% as.numeric - DJI[loc,4] %>% as.numeric, error = function(e) {NA})
}

rollingSD<-function(x,width){

s = sqrt(mean(head(x,width)^2,na.rm=TRUE))
n = length(x)

for(i in (width+1):n){
x_sub = tail(head(x,i),width)
s_sub = sqrt(mean(x_sub^2,na.rm=TRUE))
s = c(s,s_sub)
}
return(xts(na.locf(s),order.by=index(tail(x,-width+1))))

}

dSD.sls<-function(xts,loc,sX,tX){
if(dim(xts)[2]==1){ xts<-merge(xts,xts,xts,xts) }
n=length(loc)
sdpnl<-mat.or.vec(n,1)
pnl<-mat.or.vec(n,1)
hp<-mat.or.vec(n,1)
  for(i in 1:n){
    sub <- xts[paste(index(xts[loc[i],]),"/",sep=""),]
    tgt <- sub[1,4] %>% as.numeric - tX*sub[1,]$sd %>% as.numeric
    stop <- sub[1,4] %>% as.numeric + sX*sub[1,]$sd %>% as.numeric
    tgt.loc <- min(tail(which(sub[,3]<=tgt),-1))
    stop.loc <- min(tail(which(sub[,2]>=stop),-1))
    sdpnl[i]<-ifelse(tgt.loc < stop.loc, tX, -sX)
    pnl[i]<-ifelse(tgt.loc < stop.loc, sub[1,4] %>% as.numeric - tgt, sub[1,4] %>% as.numeric - stop)
    hp[i]<-min(tgt.loc,stop.loc)
  }
  return(xts(cbind(sdpnl,pnl,hp),order.by=as.Date(index(xts[loc,]))))
}

IC <- function(x){
IC = apply(x,2,function(x) mean(x,na.rm=TRUE)/sd(x,na.rm=TRUE))
return(IC)
}

ICmat = mat.or.vec(31,31)
colnames(ICmat)<-seq(1,4,by=.1)
rownames(ICmat)<-seq(1,4,by=.1)
for(i in 1:2){
  for(j in 1:31){
    pnl = dSD.sls(DJI,loc,1+i*0.1-0.1,1+j*0.1-0.1)
    stats = merge(candleSize(DJI,loc),DJI[loc,c("sd","range","yrange")],pnl)
    stats.f = stats[stats$range > 0.66,]
    ICmat[i,j] = IC(stats.f$sdpnl)
}}

    loc = sample(seq(1,2777,by=1),30)
    loc = darkCloudCover(DJI)
    pnl = dSD.sls(DJI,loc,1,2)
    stats = merge(candleSize(DJI,loc),DJI[loc,c("sd","range","yrange","macd","signal","diff")],pnl)
    stats.f = stats[stats$DJI.Close <0.4 & stats$range < 0.75,]
    IC(stats.f$sdpnl)

stats = merge(candleSize(DJI,loc),DJI[loc,c("sd","range","yrange","macd","signal","diff")],pnl)
ICvec = mat.or.vec(100,1)
for(i in 1:100){
loc = sample(seq(1,8117,by=1),276)
pnl = uSD.sls(DJI,loc,1,2)
ICvec[i] = IC(pnl$sdpnl)
}

    X = na.omit(stats[,c(1,3,4,5)])
    X = merge(X[,1]*X[,4],X[,2]*X[,4],X[,3]*X[,4])
     tryCatch({weights = tangencyPortfolio(X)}, error = function(e) {weights <- weights})

################################################################################
umbrella <- function(x){
n = dim(x)[1]
loc <-mat.or.vec(0,1)
  for(i in 1:n){
    o = x[i,1]
    h = x[i,2]
    l = x[i,3]
    c = x[i,4]
    if (h-o == 0 & min(o,c)-l >= 2*abs(o-c)){
    loc <- c(loc,i)
    }
  }
return(loc)
}

################################################################################
engulfingBull <- function(x){
n = dim(x)[1]
loc <-mat.or.vec(0,1)
  for(i in 2:n){
    o1 = x[i-1,1]
    h1 = x[i-1,2]
    l1 = x[i-1,3]
    c1 = x[i-1,4]
    o2 = x[i,1]
    h2 = x[i,2]
    l2 = x[i,3]
    c2 = x[i,4]
    if (as.numeric(c1) < as.numeric(o1) & as.numeric(c2) > as.numeric(o1) & as.numeric(o2) < as.numeric(c1)){
    loc <- c(loc,i)
    }
  }
return(loc)
}

################################################################################
engulfingBear <- function(x){
n = dim(x)[1]
loc <-mat.or.vec(0,1)
  for(i in 2:n){
    o1 = x[i-1,1]
    h1 = x[i-1,2]
    l1 = x[i-1,3]
    c1 = x[i-1,4]
    o2 = x[i,1]
    h2 = x[i,2]
    l2 = x[i,3]
    c2 = x[i,4]
    if (as.numeric(c1) > as.numeric(o1) & as.numeric(c2) < as.numeric(o1) & as.numeric(o2) > as.numeric(c1)){
    loc <- c(loc,i)
    }
  }
return(loc)
}

################################################################################
darkCloudCover <- function(x){
n = dim(x)[1]
loc <-mat.or.vec(0,1)
  for(i in 2:n){
    o1 = x[i-1,1]
    h1 = x[i-1,2]
    l1 = x[i-1,3]
    c1 = x[i-1,4]
    o2 = x[i,1]
    h2 = x[i,2]
    l2 = x[i,3]
    c2 = x[i,4]
    if (as.numeric(c1) > as.numeric(o1) & as.numeric(o2) > as.numeric(h1) & as.numeric(c2) <= as.numeric((c1+o1)/2)){
    loc <- c(loc,i)
    }
  }
return(loc)
}

piercingPattern <- function(x){
n = dim(x)[1]
loc <-mat.or.vec(0,1)
  for(i in 2:n){
    o1 = x[i-1,1]
    h1 = x[i-1,2]
    l1 = x[i-1,3]
    c1 = x[i-1,4]
    o2 = x[i,1]
    h2 = x[i,2]
    l2 = x[i,3]
    c2 = x[i,4]
    if (as.numeric(c1) < as.numeric(o1) & as.numeric(o2) < as.numeric(l1) & as.numeric(c2) > as.numeric((c1+o1)/2)){
    loc <- c(loc,i)
    }
  }
return(loc)
}

################################################################################
morningStar <- function(x){
n = dim(x)[1]
loc <-mat.or.vec(0,1)
for(i in 3:n){
  o1 = x[i-2,1]
  h1 = x[i-2,2]
  l1 = x[i-2,3]
  c1 = x[i-2,4]
  o2 = x[i-1,1]
  h2 = x[i-1,2]
  l2 = x[i-1,3]
  c2 = x[i-1,4]
  o3 = x[i,1]
  h3 = x[i,2]
  l3 = x[i,3]
  c3 = x[i,4]
  if (
  as.numeric(c1) < as.numeric(o1) & as.numeric(o2) < as.numeric(c1) & as.numeric(c2) < as.numeric(c1) & as.numeric(o2) < as.numeric(o1) & as.numeric(o2) < as.numeric(c3) & as.numeric(c2) < as.numeric(c3) & as.numeric(o2) < as.numeric(o3) & as.numeric(c2) < as.numeric(o3) & as.numeric(c2) < as.numeric(o1) & as.numeric(c3) >= as.numeric((c1+o1)/2)){
  loc <- c(loc,i)
  }
}
return(loc)
}

eveningStar <- function(x){
n = dim(x)[1]
loc <-mat.or.vec(0,1)
for(i in 3:n){
  o1 = x[i-2,1]
  h1 = x[i-2,2]
  l1 = x[i-2,3]
  c1 = x[i-2,4]
  o2 = x[i-1,1]
  h2 = x[i-1,2]
  l2 = x[i-1,3]
  c2 = x[i-1,4]
  o3 = x[i,1]
  h3 = x[i,2]
  l3 = x[i,3]
  c3 = x[i,4]
  if (
  as.numeric(c1) > as.numeric(o1) & as.numeric(o2) > as.numeric(c1) & as.numeric(c2) > as.numeric(c1) & as.numeric(o2) > as.numeric(o1) & as.numeric(c2) > as.numeric(o1) & as.numeric(o2) > as.numeric(c3) & as.numeric(c2) > as.numeric(c3) & as.numeric(o2) > as.numeric(o3) & as.numeric(c2) > as.numeric(o3) & as.numeric(c3) <= as.numeric((c1+o1)/2)){
  loc <- c(loc,i)
  }
}
return(loc)
}

shootingStar <- function(x){
## inverted hammer comes after decline, shootingStar after rise
n = dim(x)[1]
loc <-mat.or.vec(0,1)
  for(i in 1:n){
    o = x[i,1]
    h = x[i,2]
    l = x[i,3]
    c = x[i,4]
    if ((l-o == 0 | l-c == 0) & h-max(o,c) >= 2*abs(o-c)){
    loc <- c(loc,i)
    }
  }
return(loc)
}

################################################################################
bullishHarami <- function(x){
n = dim(x)[1]
loc <-mat.or.vec(0,1)
  for(i in 2:n){
    o1 = x[i-1,1]
    h1 = x[i-1,2]
    l1 = x[i-1,3]
    c1 = x[i-1,4]
    o2 = x[i,1]
    h2 = x[i,2]
    l2 = x[i,3]
    c2 = x[i,4]
    if (as.numeric(c1) < as.numeric(o1) & as.numeric(max(o2,c2)) < as.numeric(o1) & as.numeric(min(c2,o2)) > as.numeric(c1)){
    loc <- c(loc,i)
  }
}
return(loc)
}

bearishHarami <- function(x){
n = dim(x)[1]
loc <-mat.or.vec(0,1)
  for(i in 2:n){
    o1 = x[i-1,1]
    h1 = x[i-1,2]
    l1 = x[i-1,3]
    c1 = x[i-1,4]
    o2 = x[i,1]
    h2 = x[i,2]
    l2 = x[i,3]
    c2 = x[i,4]
    if (as.numeric(c1) > as.numeric(o1) & as.numeric(max(o2,c2)) < as.numeric(c1) & as.numeric(min(c2,o2)) > as.numeric(o1)){
    loc <- c(loc,i)
  }
}
return(loc)
}

################################################################################
tweezerTop <- function(x){
### ideal long first short second
n = dim(x)[1]
loc <-mat.or.vec(0,1)
  for(i in 2:n){
    o1 = x[i-1,1]
    h1 = x[i-1,2]
    l1 = x[i-1,3]
    c1 = x[i-1,4]
    o2 = x[i,1]
    h2 = x[i,2]
    l2 = x[i,3]
    c2 = x[i,4]
    if (as.numeric(h1) == as.numeric(h2)){
    loc <- c(loc,i)
  }
}
return(loc)
}

tweezerBottom <- function(x){
### ideal long first short second
n = dim(x)[1]
loc <-mat.or.vec(0,1)
  for(i in 2:n){
    o1 = x[i-1,1]
    h1 = x[i-1,2]
    l1 = x[i-1,3]
    c1 = x[i-1,4]
    o2 = x[i,1]
    h2 = x[i,2]
    l2 = x[i,3]
    c2 = x[i,4]
    if (as.numeric(l1) == as.numeric(l2)){
    loc <- c(loc,i)
  }
}
return(loc)
}

################################################################################
bullishBeltHold <- function(x,percent){
n = dim(x)[1]
loc <-mat.or.vec(0,1)
  for(i in 1:n){
    o = x[i,1]
    h = x[i,2]
    l = x[i,3]
    c = x[i,4]
    if (c > o & o == l & c-l >= percent*(h-l)){
    loc <- c(loc,i)
    }
  }
}

bearishBeltHold <- function(x,percent){
n = dim(x)[1]
loc <-mat.or.vec(0,1)
  for(i in 1:n){
    o = x[i,1]
    h = x[i,2]
    l = x[i,3]
    c = x[i,4]
    if (c < o & o == h & h-c >= percent*(h-l)){
    loc <- c(loc,i)
    }
  }
}

################################################################################
upsideGapTwoCrows <- function(x){
n = dim(x)[1]
loc <-mat.or.vec(0,1)
  for(i in 3:n){
    o1 = x[i-2,1]
    h1 = x[i-2,2]
    l1 = x[i-2,3]
    c1 = x[i-2,4]
    o2 = x[i-1,1]
    h2 = x[i-1,2]
    l2 = x[i-1,3]
    c2 = x[i-1,4]
    o3 = x[i,1]
    h3 = x[i,2]
    l3 = x[i,3]
    c3 = x[i,4]
    if (
    as.numeric(c1) > as.numeric(o1) & as.numeric(o2) > as.numeric(c2) & as.numeric(o2) > as.numeric(c1) & as.numeric(c2) > as.numeric(c1) & as.numeric(o3) > as.numeric(o2) & as.numeric(c3) < as.numeric(c2)){
    loc <- c(loc,i)
  }
}
return(loc)
}

threeBlackCrows <- function(x,percent){
n = dim(x)[1]
loc <-mat.or.vec(0,1)
  for(i in 3:n){
    o1 = x[i-2,1]
    h1 = x[i-2,2]
    l1 = x[i-2,3]
    c1 = x[i-2,4]
    o2 = x[i-1,1]
    h2 = x[i-1,2]
    l2 = x[i-1,3]
    c2 = x[i-1,4]
    o3 = x[i,1]
    h3 = x[i,2]
    l3 = x[i,3]
    c3 = x[i,4]
    if (
    as.numeric(o1) > as.numeric(c1) & as.numeric(o2) > as.numeric(c2) & as.numeric(o3) > as.numeric(c3) & as.numeric(o2) > as.numeric(c1) & as.numeric(o3) > as.numeric(c2) & as.numeric(c2) < as.numeric(c1) & as.numeric(c3) < as.numeric(c2) & as.numeric(h1) - as.numeric(c1) >= percent*(as.numeric(h1)-as.numeric(l1)) & as.numeric(h2) - as.numeric(c2) >= percent*(as.numeric(h2)-as.numeric(l2)) & as.numeric(h3) - as.numeric(c3) >= percent*(as.numeric(h3)-as.numeric(l3))){
    loc <- c(loc,i)
  }
}
return(loc)
}

threeWhiteSoldiers <- function(x,percent){
n = dim(x)[1]
loc <-mat.or.vec(0,1)
  for(i in 3:n){
    o1 = x[i-2,1]
    h1 = x[i-2,2]
    l1 = x[i-2,3]
    c1 = x[i-2,4]
    o2 = x[i-1,1]
    h2 = x[i-1,2]
    l2 = x[i-1,3]
    c2 = x[i-1,4]
    o3 = x[i,1]
    h3 = x[i,2]
    l3 = x[i,3]
    c3 = x[i,4]
    if (
    as.numeric(o1) < as.numeric(c1) & as.numeric(o2) < as.numeric(c2) & as.numeric(o3) < as.numeric(c3) & as.numeric(o2) < as.numeric(c1) & as.numeric(o3) < as.numeric(c2) & as.numeric(c2) > as.numeric(c1) & as.numeric(c3) > as.numeric(c2) & as.numeric(c1) - as.numeric(l1) >= percent*(as.numeric(h1)-as.numeric(l1)) & as.numeric(c2) - as.numeric(l2) >= percent*(as.numeric(h2)-as.numeric(l2)) & as.numeric(c3) - as.numeric(l3) >= percent*(as.numeric(h3)-as.numeric(l3))){
    loc <- c(loc,i)
  }
}
return(loc)
}
